ForeignKinds.Lib (tests/purus/passing/ForeignKind/Lib.purs)
Imported Modules: 
  Builtin,
  ForeignKinds.Lib,
  Prim
Exports: 
  NatProxy,
  succProxy,
  proxy0,
  proxy1,
  proxy2,
  proxy3
Re-Exports: 
  
Foreign: 
  
Declarations: 
NatProxy :: forall (@t :: ForeignKinds.Lib.Nat). ForeignKinds.Lib.NatProxy (t :: ForeignKinds.Lib.Nat)
NatProxy = NatProxy

AddNat$Dict :: Prim.Record {} -> Prim.Record {}
AddNat$Dict = \(x: Prim.Record {}) -> (x: Prim.Record {})

succProxy :: forall (n :: ForeignKinds.Lib.Nat). ForeignKinds.Lib.NatProxy (n :: ForeignKinds.Lib.Nat) -> ForeignKinds.Lib.NatProxy ForeignKinds.Lib.Succ (n :: ForeignKinds.Lib.Nat)
succProxy = 
  \(v: ForeignKinds.Lib.NatProxy (n :: ForeignKinds.Lib.Nat)) -> 
    (NatProxy: ForeignKinds.Lib.NatProxy
    ForeignKinds.Lib.Succ (n :: ForeignKinds.Lib.Nat))

proxy3 :: ForeignKinds.Lib.NatProxy ForeignKinds.Lib.Succ ForeignKinds.Lib.Succ ForeignKinds.Lib.Succ ForeignKinds.Lib.Zero
proxy3 = 
  (NatProxy: ForeignKinds.Lib.NatProxy
  ForeignKinds.Lib.Succ
  ForeignKinds.Lib.Succ ForeignKinds.Lib.Succ ForeignKinds.Lib.Zero)

proxy2 :: ForeignKinds.Lib.NatProxy ForeignKinds.Lib.Succ ForeignKinds.Lib.Succ ForeignKinds.Lib.Zero
proxy2 = 
  (NatProxy: ForeignKinds.Lib.NatProxy
  ForeignKinds.Lib.Succ ForeignKinds.Lib.Succ ForeignKinds.Lib.Zero)

proxy1 :: ForeignKinds.Lib.NatProxy ForeignKinds.Lib.Succ ForeignKinds.Lib.Zero
proxy1 = 
  (NatProxy: ForeignKinds.Lib.NatProxy
  ForeignKinds.Lib.Succ ForeignKinds.Lib.Zero)

proxy0 :: ForeignKinds.Lib.NatProxy ForeignKinds.Lib.Zero
proxy0 = (NatProxy: ForeignKinds.Lib.NatProxy ForeignKinds.Lib.Zero)