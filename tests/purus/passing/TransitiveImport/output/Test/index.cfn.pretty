Test (tests/purus/passing/TransitiveImport/Test.purs)
Imported Modules: 
  Builtin,
  Prim,
  Test
Exports: 
  test,
  Unit,
  unitTestCls
Re-Exports: 
  
Foreign: 
  
Declarations: 
Unit :: Test.Unit
Unit = Unit

TestCls$Dict :: forall (a :: Prim.Type). { test :: (a :: Prim.Type) -> (a :: Prim.Type) } -> { test :: (a :: Prim.Type) -> (a :: Prim.Type) }
TestCls$Dict = 
  \(x: {   test :: (a :: Prim.Type) -> (a :: Prim.Type) }) -> 
    (x: {   test :: (a :: Prim.Type) -> (a :: Prim.Type) })

unitTestCls :: Test.TestCls$Dict Test.Unit
unitTestCls = 
  (TestCls$Dict: {   test :: Test.Unit -> Test.Unit } ->
  Test.TestCls$Dict Test.Unit)
  ({ test: \(v: Test.Unit) -> (Unit: Test.Unit) }: {
                                                     test :: Test.Unit ->
                                                     Test.Unit
                                                   })

test :: forall (@a :: Prim.Type). Test.TestCls$Dict (a :: Prim.Type) -> (a :: Prim.Type) -> (a :: Prim.Type)
test = 
  \(dict: Test.TestCls$Dict (a :: Prim.Type)) -> 
    case (dict: Test.TestCls$Dict (a :: Prim.Type)) of 
       TestCls$Dict v -> 
         (v: {   test :: (a :: Prim.Type) -> (a :: Prim.Type) })
         .test