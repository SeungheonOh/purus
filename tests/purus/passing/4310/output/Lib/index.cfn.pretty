Lib (tests/purus/passing/4310/Lib.purs)
Imported Modules: 
  Builtin,
  Lib,
  Prim
Exports: 
  runTest,
  Tuple,
  mappend,
  testInt
Re-Exports: 
  
Foreign: 
  
Declarations: 
Tuple :: forall (@a :: Prim.Type) (@b :: Prim.Type). (a :: Prim.Type) -> (b :: Prim.Type) -> (Lib.Tuple (a :: Prim.Type) (b :: Prim.Type))
Tuple = Tuple

Test$Dict :: forall (a :: Prim.Type). { runTest :: (a :: Prim.Type) -> Prim.String } -> { runTest :: (a :: Prim.Type) -> Prim.String }
Test$Dict = 
  \(x: {   runTest :: (a :: Prim.Type) -> Prim.String }) -> 
    (x: {   runTest :: (a :: Prim.Type) -> Prim.String })

testInt :: Lib.Test$Dict Prim.Int
testInt = 
  (Test$Dict: {   runTest :: Prim.Int -> Prim.String } ->
  Lib.Test$Dict Prim.Int)
  ({ runTest: \(v: Prim.Int) -> ("4": Prim.String) }: {
                                                        runTest :: Prim.Int ->
                                                        Prim.String
                                                      })

runTest :: forall (@a :: Prim.Type). Lib.Test$Dict (a :: Prim.Type) -> (a :: Prim.Type) -> Prim.String
runTest = 
  \(dict: Lib.Test$Dict (a :: Prim.Type)) -> 
    case (dict: Lib.Test$Dict (a :: Prim.Type)) of 
       Test$Dict v -> 
         (v: {   runTest :: (a :: Prim.Type) -> Prim.String })
         .runTest

mappend :: Prim.String -> Prim.String -> Prim.String
mappend = \(v: Prim.String) -> \(v1: Prim.String) -> ("mappend": Prim.String)